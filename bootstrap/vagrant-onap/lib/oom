#!/bin/bash

source /var/onap/functions

RANCHER_PORT=8880
oom_delay=30
export RANCHER_URL=http://localhost:$RANCHER_PORT
export RANCHER_ACCESS_KEY='access_key'
export RANCHER_SECRET_KEY='secret_key'

# _install_docker() - Function that installs Docker version for Rancher
function _install_docker {
    if ! $(docker version &>/dev/null); then
        curl https://releases.rancher.com/install-docker/1.12.sh | sh
        _configure_docker_settings
    fi
}

# _install_rancher() - Function that installs Rancher CLI and container
function _install_rancher {
    local rancher_version=v0.6.5
    local rancher_server_version=v1.6.11
    local rancher_server=rancher/server:$rancher_server_version

    if [ ! -d /opt/rancher/current ]; then
        mkdir -p /opt/rancher/current
        wget https://github.com/rancher/cli/releases/download/$rancher_version/rancher-linux-amd64-$rancher_version.tar.gz
        tar -xzf rancher-linux-amd64-$rancher_version.tar.gz -C /tmp
        mv /tmp/rancher-$rancher_version/rancher /opt/rancher/current/
    fi

    _install_docker
    pull_docker_image $rancher_server
    run_docker_image -d --restart=unless-stopped -p $RANCHER_PORT:8080 $rancher_server
    while true; do
        if curl --fail -X GET $RANCHER_URL; then
            break
        fi
        echo "waiting for racher"
        sleep $oom_delay
    done
}

# _install_kubernetes() - Function that deploys kubernetes via RancherOS host registration
function _install_kubernetes {
    local rancher_agent_version=v1.2.7
    local rancher_agent=rancher/agent:$rancher_agent_version

    _install_rancher

    pushd /opt/rancher/current/
    sleep $oom_delay
    export RANCHER_ENVIRONMENT=`./rancher env create -t kubernetes onap_on_kubernetes`
    popd
    pull_docker_image $rancher_agent
    install_python_package rancher-agent-registration
    export no_proxy=$no_proxy,$IP_ADDRESS
    rancher-agent-registration --host-ip $IP_ADDRESS --url http://$IP_ADDRESS:$RANCHER_PORT --environment $RANCHER_ENVIRONMENT --key $RANCHER_ACCESS_KEY --secret $RANCHER_SECRET_KEY
}

# _install_kubectl() - Function that installs kubectl as client for kubernetes
function _install_kubectl {
    if ! $(kubectl version &>/dev/null); then
        rm -rf ~/.kube
        curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
        chmod +x ./kubectl
        mv ./kubectl /usr/local/bin/kubectl
        mkdir ~/.kube
        pushd ~/.kube
        python /var/onap/files/kubectl_config_generator.py
        popd
    fi
}

# _install_helm() - Function that install Kubernetes Package Manager
function _install_helm {
    local helm_version=v2.3.0

    if ! $(helm version &>/dev/null); then
        wget http://storage.googleapis.com/kubernetes-helm/helm-${helm_version}-linux-amd64.tar.gz
        tar -zxvf helm-${helm_version}-linux-amd64.tar.gz -C /tmp
        mv /tmp/linux-amd64/helm /usr/local/bin/helm
    fi
}

# _install_oom() - Function that clones OOM and deploys ONAP
function install_oom {
    if [[ "$clone_repo" != "True" ]]; then
        clone_repos "oom"
    fi
    pushd ${src_folders[oom]}/kubernetes/oneclick
    source setenv.bash

    pushd ${src_folders[oom]}/kubernetes/config
    cp onap-parameters-sample.yaml onap-parameters.yaml
    ./createConfig.sh -n onap
    popd

    while [ $(kubectl get pods -n onap -a | grep config | grep 0/1 | grep Completed | wc -l) -eq 0 ]; do
        echo "waiting for config pod to complete"
        sleep $oom_delay
    done

    for app in consul msb mso message-router sdnc vid robot portal policy appc aai sdc dcaegen2 log cli multicloud clamp vnfsdk uui aaf vfc kube2msb; do
        ./createAll.bash -n onap -a $app
    done
    popd
}

# init_oom() - Function that deploys ONAP using OOM
function init_oom {
    _install_kubernetes
    _install_kubectl
    _install_helm
    until kubectl cluster-info; do
        echo "waiting for kubernetes host"
        sleep $oom_delay
    done

    if [[ "$clone_repo" == "True" ]]; then
        clone_repos "oom"
    fi

    if [[ "$skip_install" == "False" ]]; then
        install_oom
    fi
}
